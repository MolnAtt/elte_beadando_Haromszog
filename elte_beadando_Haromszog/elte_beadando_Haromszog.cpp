#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool between_cl(const int& a, const int& b, const int& c) { return (a <= b && b <= c) || (c <= b && b <= a); }
bool between_int(const int& a, const int& b, const int& c) { return (a < b && b < c) || (c < b && b < a); }


class Pont
{
public:
	int x, y;
	int ix;
	Pont(int a=0, int b=0, int i=-1)
	{
		x = a;
		y = b;
		ix = i;
	}



	/// <summary>
	/// QOP szög elõjelét adja meg.
	/// </summary>
	/// <param name="Q">a másik pont</param>
	/// <returns>QOP szög elõjele</returns>
	static int elojel(int S) { return S < 0 ? -1 : (S == 0 ? 0 : 1); }
	int irany(const Pont& Q) const { return elojel(y * Q.x - x * Q.y); }
	int irany(const Pont& B, const Pont& C) const { return (B - *this).irany(C - *this); }
	bool operator ==(const Pont& Q) const { return this->x == Q.x && this->y == Q.y; }
	bool operator !=(const Pont& Q) const { return !(*this == Q); }
	Pont operator -(const Pont& Q) const { return Pont(this->x - Q.x, this->y - Q.y); }
	int negyzeteshossz() const { return x * x + y * y; }
	int negyzetes_tavolsaga_ettol(const Pont& P) const { return (*this - P).negyzeteshossz(); }

	
	bool teglalapban_cl(const Pont& P, const Pont& Q) const { return between_cl(x, P.x, Q.x) && between_cl(y, P.y, Q.y); }
	bool teglalapban_int(const Pont& P, const Pont& Q) const { return between_int(x, P.x, Q.x) && between_int(y, P.y, Q.y); }
	bool is_in_cl(const Pont& P, const Pont& Q) const { return 0 == irany(P, Q) && teglalapban_cl(P, Q); }
	bool is_in_int(const Pont& P, const Pont& Q) const { return 0 == irany(P, Q) && teglalapban_int(P, Q); }
	
	bool is_in_int(const Pont& A, const Pont& B, const Pont& C) const
	{
		int merreforog = A.irany(B, *this);
		return merreforog == B.irany(C, *this) && merreforog == C.irany(A, *this);
	}

	bool is_in_cl(const Pont& A, const Pont& B, const Pont& C) const { return is_in_int(A, B, C) || is_in_cl(A, B) || is_in_cl(B, C) || is_in_cl(C, A); }

	
	~Pont(){}

	Pont balmeroleges() const { return Pont(-y, x); }
	Pont jobbmeroleges() const { return Pont(y, -x); }

	/// <summary>
	/// két ponton keresztül normálvektoros egyenlet három együtthatója egy vektorban.
	/// </summary>
	/// <param name="Q"></param>
	/// <returns></returns>
	vector<int> egyenes(const Pont& Q) const
	{
		/** /
		Pont iranyvektor = *this - Q;
		Pont normalvektor = iranyvektor.balra_forgat();
		/**/
		Pont N = (*this - Q).balmeroleges();
		return vector<int>{N.x, N.y, x* N.x + y * N.y};
	}
private:

};

class Ponthalmaz
{
public:

	int N;
	
	vector<Pont>* lista;
	
	Ponthalmaz()
	{
		cin >> N;
		lista = new vector<Pont>(N);
		for (int i = 0; i < N; i++)
		{
			int x, y;
			cin >> x >> y;
			lista->at(i)=Pont(x, y, i);
		}
	}

	/// <summary>
	/// Kiválaszt, feltéve, hogy biztosan van.
	/// </summary>
	/// <param name="predikatum">a kiválasztási feltétel</param>
	/// <returns>a kiválasztott pont</returns>
	Pont Find(bool (*predikatum)(Pont P))
	{
		int i = 0;
		while (!predikatum(lista->at(i))) { i++; }
		return lista->at(i);
	}

	vector<Pont> egy_haromszog()
	{
		Pont A = lista->at(0);

		int i = 1;
		while (lista->at(i) == A) { i++; }
		Pont B = lista->at(i);

		int j = 2;
		while (lista->at(j).irany(A, B)==0) { j++; }
		Pont C = lista->at(j);

		return vector<Pont>{A, B, C};
	}

	vector<Pont> egy_kisharomszog()
	{
		vector<Pont> H = egy_haromszog();
		
		// H0--H1 szakaszban H1-et közelítjük H0-hoz, ha van közéjük esõ pont

		for (int i = 0; i < N; i++)
			if (lista->at(i).is_in_int(H[0], H[1]))
				H[1] = lista->at(i);

		// H0--H1--H2 háromszögben H2-õt közelítjük H0--H1 szakaszhoz, ha van közéjük (háromszög lezártja kivéve a három pont) esõ pont 
		for (int i = 0; i < N; i++)
			if (lista->at(i).is_in_int(H[0], H[1], H[2]) || lista->at(i).is_in_int(H[0], H[2]) || lista->at(i).is_in_int(H[1], H[2]))
				H[2] = lista->at(i);

		return H;
	}


	Pont bal_also_sarokpont() const
	{
		Pont* best = &(lista->at(0));
		for (int i = 1; i < N; i++)
			if (lista->at(i).x < best->x || (lista->at(i).x == best->x && lista->at(i).y < best->y))
				best = &(lista->at(i));
		return *best;
	}


	void tikz_ponthalmaz_lerajzolasa(double meretarany=1) const
	{

		cerr << "\n\\begin{tikzpicture} [pont/.style={draw = black, circle, inner sep = .1mm}]";
		cerr << endl;
		for (Pont& p : *lista)
			cerr << "\\node[pont] (" << p.ix << ") at (" << (meretarany*(double)p.x) << ", " << (meretarany*(double)p.y) << "){" << p.ix << "};\n";
	}

	void static tikz_haromszog_lerajzolasa(vector<Pont> h)
	{
		cerr << "\n\\draw";
		for (int i = 0; i < h.size(); i++)
		{
			cerr << "(" << h[i].ix << ")--";
		}
		cerr << "(" << h[0].ix << ");\n";
	}

	void static haromszog_koruljarasba_rendezese(vector<Pont>&h) { if (h[0].irany(h[1], h[2]) == 1) swap(h[1], h[2]); }

	/** /
	Ponthalmaz konvex_burok()
	{
		return;
	}
	/**/

	~Ponthalmaz(){}


private:

};



int main()
{
	Ponthalmaz H;
	vector<Pont> h = H.egy_kisharomszog();
	Ponthalmaz::haromszog_koruljarasba_rendezese(h);
	cout << 1+h[0].ix << " " << 1+h[1].ix << " " << 1+h[2].ix;

	/** /
	H.tikz_ponthalmaz_lerajzolasa();

	Ponthalmaz::tikz_haromszog_lerajzolasa(h);
	cerr << "\\end{tikzpicture}";
	/**/
}

/* be1.txt (ennek biztosan rossz a ki1.txt-je)

6
5 6 
7 5 
7 7 
4 5 
6 2 
2 3

*/


/* be2.txt

1000
927 305
683 353
122 376
6 270
325 998
258 324
316 522
256 930
237 368
335 521
955 738
242 705
544 499
211 163
65 776
320 647
357 520
614 966
414 253
556 234
507 939
761 957
405 897
336 543
152 310
762 212
844 326
308 566
317 221
19 399
568 859
118 497
992 688
52 9
471 346
837 713
328 500
941 718
717 241
126 161
236 178
956 881
32 397
783 545
237 903
197 854
571 250
15 517
175 434
173 74
870 812
723 355
644 1
262 942
973 122
810 281
817 876
558 265
269 814
195 20
759 760
288 322
282 606
697 153
755 709
849 273
539 526
862 337
583 785
116 415
476 747
421 533
495 867
903 546
428 385
78 270
380 264
764 810
637 991
774 223
549 490
881 863
830 462
749 433
241 220
824 136
420 501
534 382
70 872
256 357
268 792
586 567
101 449
26 78
83 572
557 302
875 241
764 618
143 236
120 252
449 235
97 553
115 639
805 356
613 402
575 546
903 120
646 854
351 833
632 30
261 461
975 406
789 985
618 995
69 177
95 3
312 710
648 866
226 594
131 584
165 458
214 714
331 100
963 605
605 728
145 91
163 644
731 543
85 2
564 899
482 181
35 724
902 620
44 420
305 670
791 792
806 599
221 371
138 866
88 891
70 471
210 131
365 510
609 89
594 365
113 752
444 855
379 289
795 430
85 77
24 346
305 774
48 874
106 247
794 962
349 152
689 422
477 703
99 94
937 788
43 866
706 356
836 680
879 632
71 627
731 150
871 975
274 152
443 659
775 820
891 805
922 125
375 196
985 343
181 834
820 680
505 392
477 797
194 775
832 59
10 724
103 400
757 548
377 920
742 49
60 716
143 219
224 144
848 202
470 572
82 810
441 405
484 320
724 845
405 669
77 473
931 257
552 33
948 1
302 365
739 164
719 845
845 203
286 378
492 103
829 820
859 511
65 436
755 514
438 947
478 297
302 305
123 553
54 10
826 144
818 143
656 453
978 497
180 629
917 595
498 124
421 505
456 833
194 75
296 701
540 70
6 468
435 125
610 429
818 972
360 655
236 206
526 84
452 15
989 11
699 628
492 976
998 25
169 543
718 995
889 25
109 864
3 166
253 564
920 260
907 774
173 926
716 409
348 16
222 119
160 266
834 907
904 164
777 462
413 50
765 165
983 495
689 424
69 782
75 86
84 678
153 487
11 918
658 138
556 466
759 281
236 493
298 466
599 680
365 343
494 705
541 383
834 839
985 830
158 45
302 523
104 573
13 633
432 71
543 609
692 978
231 189
651 122
841 399
713 843
602 715
298 501
800 587
666 576
627 610
644 162
341 3
482 159
870 715
189 392
162 172
429 279
503 979
883 65
65 636
117 693
184 772
834 765
142 8
207 251
177 508
953 678
680 22
227 836
572 453
82 369
620 476
247 729
597 3
605 803
113 704
189 600
576 225
766 306
405 709
616 431
891 484
931 312
119 373
547 637
127 479
567 596
795 769
594 106
467 61
73 760
906 962
271 417
98 930
342 268
511 124
398 941
416 947
243 193
235 982
690 10
704 176
219 535
418 363
422 47
761 169
663 999
211 604
980 27
532 31
697 506
459 980
721 165
632 287
976 320
451 74
871 34
934 379
200 362
222 707
650 146
54 328
103 993
572 421
900 332
824 816
784 444
26 373
257 206
811 809
36 102
199 474
811 205
610 901
324 358
25 775
239 555
82 216
240 853
614 269
118 28
381 325
747 988
299 463
950 496
922 106
981 355
992 604
966 117
451 471
760 210
186 913
349 218
509 731
347 332
968 372
460 836
771 46
546 375
678 10
711 956
860 912
188 534
653 186
528 615
641 337
28 15
145 295
644 798
464 519
208 822
114 250
484 196
723 916
261 792
339 374
957 530
681 949
225 504
318 74
193 806
988 659
767 509
119 699
524 287
234 374
335 890
76 23
23 643
428 853
628 525
75 211
841 489
906 151
476 0
364 190
624 584
765 582
275 67
634 195
892 398
35 838
288 512
423 179
877 202
471 994
198 806
917 313
248 290
446 904
444 703
550 285
527 637
171 696
662 474
533 225
390 403
12 905
746 1
34 735
814 152
666 388
180 972
978 232
341 717
445 807
755 396
412 174
36 606
334 579
697 921
197 60
160 365
467 318
47 381
101 841
642 102
687 601
366 303
680 961
711 345
904 443
151 272
263 811
96 995
543 253
500 241
324 804
315 301
707 196
341 547
361 714
904 611
974 115
204 182
993 714
757 470
822 78
265 699
262 211
315 259
549 192
775 906
153 625
238 90
121 717
205 804
861 171
345 336
589 929
725 170
197 149
80 949
591 191
545 148
113 454
876 415
264 618
417 795
5 595
515 565
335 432
30 96
193 322
517 652
758 186
851 234
114 680
552 894
299 478
630 804
296 220
397 502
297 133
604 428
743 546
768 349
668 413
866 6
262 185
868 729
704 784
852 447
650 861
245 440
195 851
210 418
140 557
764 817
878 160
470 502
7 910
590 859
65 180
343 526
283 534
958 756
508 66
889 592
717 770
38 284
222 438
859 223
980 41
66 679
242 499
432 817
285 255
309 767
701 933
750 825
16 283
242 951
249 592
706 790
841 393
477 841
253 815
42 786
1 385
967 969
778 934
329 348
74 445
757 536
912 625
191 407
766 175
217 554
863 138
935 337
792 9
144 320
86 6
575 84
161 363
26 287
40 465
355 480
485 409
502 119
194 654
426 487
916 18
347 61
518 928
327 936
953 498
128 721
683 788
626 37
734 584
613 24
507 76
52 468
638 209
615 795
740 869
567 386
394 988
600 294
543 402
523 931
717 36
717 299
236 847
18 900
72 489
294 133
356 663
853 745
198 974
905 797
437 335
381 599
441 556
448 264
961 216
211 76
787 703
470 334
560 624
392 873
533 116
678 285
457 874
542 847
444 897
149 452
333 98
917 263
71 796
330 609
189 474
271 224
715 875
685 132
167 240
44 797
559 107
573 713
77 37
791 21
128 304
160 809
173 119
183 385
382 916
960 385
642 264
167 946
294 760
392 786
265 565
390 152
902 396
291 136
173 464
856 852
155 821
957 476
92 879
3 686
782 114
248 978
824 355
715 912
162 398
360 883
991 617
198 289
856 57
415 603
403 916
648 867
132 903
58 316
458 769
89 454
222 495
147 561
239 265
618 970
505 965
629 564
639 699
588 273
31 921
195 114
814 135
665 466
283 141
257 449
264 164
736 688
430 995
808 801
784 427
469 841
819 165
439 464
204 26
567 504
578 259
221 764
918 547
289 459
145 889
776 557
501 658
897 29
750 614
889 151
818 258
444 653
375 303
69 773
835 32
496 325
962 569
750 369
156 790
489 60
261 402
648 805
17 290
876 220
535 185
84 326
861 389
71 941
525 281
1 171
382 364
391 952
190 18
78 306
359 490
424 357
255 0
337 924
892 316
97 950
680 906
987 828
594 435
301 649
933 836
217 131
388 886
84 10
582 838
700 207
359 950
536 383
831 299
346 128
599 440
336 778
697 275
532 417
160 158
136 595
808 537
974 917
558 678
63 763
539 557
386 959
77 225
919 506
702 819
148 193
73 118
25 209
339 154
319 878
95 605
766 233
133 783
959 280
755 268
167 882
467 607
406 243
199 285
558 37
659 376
720 384
643 950
411 315
437 241
758 555
167 967
200 731
508 573
670 765
307 400
821 448
624 180
465 531
40 81
21 928
39 618
772 989
868 824
399 879
903 295
919 279
537 958
566 58
773 973
801 171
702 34
641 644
274 373
843 550
837 549
996 773
257 794
984 623
700 4
245 94
658 675
684 907
292 433
880 430
617 646
554 859
125 810
59 367
760 576
483 516
64 537
826 569
505 982
78 854
251 810
557 719
701 575
667 318
985 536
509 398
40 855
863 445
919 889
859 617
274 14
139 742
584 645
905 959
287 863
740 580
866 939
598 762
344 786
685 185
23 555
710 922
280 162
936 32
125 341
248 569
712 48
761 260
422 921
47 989
420 182
396 414
48 605
218 569
443 932
593 204
350 531
555 139
731 262
415 52
709 455
484 503
891 564
38 125
296 861
189 579
263 513
204 303
461 705
151 658
399 701
449 790
230 950
308 289
488 147
746 427
801 504
13 645
330 52
698 954
160 177
83 594
256 802
596 677
698 352
718 653
691 149
579 455
464 749
281 556
264 409
579 634
225 206
332 856
165 366
901 618
54 334
136 770
848 287
742 760
582 104
663 891
576 628
48 200
171 616
442 227
81 241
64 108
499 499
360 643
77 892
846 478
17 938
878 714
102 578
9 33
561 43
777 580
389 858
424 817
7 384
878 302
973 129
858 143
537 766
835 379
521 685
471 222
481 118
187 747
322 114
804 536
12 624
46 799
242 160
707 817
485 403
262 350
820 698
584 755
714 606
147 155
569 24
910 25
342 147
64 524
660 399
504 260
542 54
500 805
863 380
240 41
812 475
922 883
277 868
372 217
799 837
809 393
997 399
108 856
889 583
629 646
813 304

*/